//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class RobertApi {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined, cancelToken?: CancelToken): Promise<UserLoginResponseResponseModel> {
        let url_ = this.baseUrl + "/api/Auths/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<UserLoginResponseResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserLoginResponseResponseModel.fromJS(resultData200);
            return Promise.resolve<UserLoginResponseResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserLoginResponseResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createUserByAdmin(body: UserCreateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/Auths/CreateUserByAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUserByAdmin(_response);
        });
    }

    protected processCreateUserByAdmin(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createUserByUserClient(body: UserCreateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/Auths/CreateUserByUserClient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUserByUserClient(_response);
        });
    }

    protected processCreateUserByUserClient(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUserByUser(body: UserUpdateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/Auths/UpdateUserByUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserByUser(_response);
        });
    }

    protected processUpdateUserByUser(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUserByAdmin(body: UserUpdateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/Auths/UpdateUserByAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserByAdmin(_response);
        });
    }

    protected processUpdateUserByAdmin(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    requestOtp(body: SendMailDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/Auths/request-otp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRequestOtp(_response);
        });
    }

    protected processRequestOtp(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @return Success
     */
    cartsGET(cartId: string, cancelToken?: CancelToken): Promise<CartDto> {
        let url_ = this.baseUrl + "/api/Carts/{cartId}";
        if (cartId === undefined || cartId === null)
            throw new Error("The parameter 'cartId' must be defined.");
        url_ = url_.replace("{cartId}", encodeURIComponent("" + cartId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCartsGET(_response);
        });
    }

    protected processCartsGET(response: AxiosResponse): Promise<CartDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CartDto.fromJS(resultData200);
            return Promise.resolve<CartDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CartDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cartsPUT(cartId: string, body: CartUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Carts/{cartId}";
        if (cartId === undefined || cartId === null)
            throw new Error("The parameter 'cartId' must be defined.");
        url_ = url_.replace("{cartId}", encodeURIComponent("" + cartId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCartsPUT(_response);
        });
    }

    protected processCartsPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    cartsDELETE(cartId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Carts/{cartId}";
        if (cartId === undefined || cartId === null)
            throw new Error("The parameter 'cartId' must be defined.");
        url_ = url_.replace("{cartId}", encodeURIComponent("" + cartId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCartsDELETE(_response);
        });
    }

    protected processCartsDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cartsPOST(body: CartAddDto | undefined, cancelToken?: CancelToken): Promise<CartDtoResponseModel> {
        let url_ = this.baseUrl + "/api/Carts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCartsPOST(_response);
        });
    }

    protected processCartsPOST(response: AxiosResponse): Promise<CartDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CartDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<CartDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CartDtoResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    couponsGET(couponId: string, cancelToken?: CancelToken): Promise<CouponDto> {
        let url_ = this.baseUrl + "/api/Coupons/{couponId}";
        if (couponId === undefined || couponId === null)
            throw new Error("The parameter 'couponId' must be defined.");
        url_ = url_.replace("{couponId}", encodeURIComponent("" + couponId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCouponsGET(_response);
        });
    }

    protected processCouponsGET(response: AxiosResponse): Promise<CouponDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CouponDto.fromJS(resultData200);
            return Promise.resolve<CouponDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CouponDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    couponsPUT(couponId: string, body: CouponUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Coupons/{couponId}";
        if (couponId === undefined || couponId === null)
            throw new Error("The parameter 'couponId' must be defined.");
        url_ = url_.replace("{couponId}", encodeURIComponent("" + couponId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCouponsPUT(_response);
        });
    }

    protected processCouponsPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    couponsDELETE(couponId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Coupons/{couponId}";
        if (couponId === undefined || couponId === null)
            throw new Error("The parameter 'couponId' must be defined.");
        url_ = url_.replace("{couponId}", encodeURIComponent("" + couponId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCouponsDELETE(_response);
        });
    }

    protected processCouponsDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    couponsPOST(body: CouponAddDto | undefined, cancelToken?: CancelToken): Promise<CouponDtoResponseModel> {
        let url_ = this.baseUrl + "/api/Coupons";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCouponsPOST(_response);
        });
    }

    protected processCouponsPOST(response: AxiosResponse): Promise<CouponDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CouponDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<CouponDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CouponDtoResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login2(body: LoginRequest | undefined, cancelToken?: CancelToken): Promise<UserLoginResponse> {
        let url_ = this.baseUrl + "/api/CustomerAuths/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin2(_response);
        });
    }

    protected processLogin2(response: AxiosResponse): Promise<UserLoginResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserLoginResponse.fromJS(resultData200);
            return Promise.resolve<UserLoginResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserLoginResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createUserByAdmin2(body: UserCreateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/CustomerAuths/CreateUserByAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUserByAdmin2(_response);
        });
    }

    protected processCreateUserByAdmin2(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createUserByUserClient2(body: UserCreateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/CustomerAuths/CreateUserByUserClient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUserByUserClient2(_response);
        });
    }

    protected processCreateUserByUserClient2(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUserByUser2(body: UserUpdateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/CustomerAuths/UpdateUserByUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserByUser2(_response);
        });
    }

    protected processUpdateUserByUser2(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUserByAdmin2(body: UserUpdateDto | undefined, cancelToken?: CancelToken): Promise<ApplicationUserDto> {
        let url_ = this.baseUrl + "/api/CustomerAuths/UpdateUserByAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserByAdmin2(_response);
        });
    }

    protected processUpdateUserByAdmin2(response: AxiosResponse): Promise<ApplicationUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApplicationUserDto.fromJS(resultData200);
            return Promise.resolve<ApplicationUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationUserDto>(null as any);
    }

    /**
     * @return Success
     */
    favoritesGET(favoriteId: string, cancelToken?: CancelToken): Promise<FavoriteDto> {
        let url_ = this.baseUrl + "/api/Favorites/{favoriteId}";
        if (favoriteId === undefined || favoriteId === null)
            throw new Error("The parameter 'favoriteId' must be defined.");
        url_ = url_.replace("{favoriteId}", encodeURIComponent("" + favoriteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFavoritesGET(_response);
        });
    }

    protected processFavoritesGET(response: AxiosResponse): Promise<FavoriteDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = FavoriteDto.fromJS(resultData200);
            return Promise.resolve<FavoriteDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FavoriteDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    favoritesPUT(favoriteId: string, body: FavoriteUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Favorites/{favoriteId}";
        if (favoriteId === undefined || favoriteId === null)
            throw new Error("The parameter 'favoriteId' must be defined.");
        url_ = url_.replace("{favoriteId}", encodeURIComponent("" + favoriteId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFavoritesPUT(_response);
        });
    }

    protected processFavoritesPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    favoritesDELETE(favoriteId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Favorites/{favoriteId}";
        if (favoriteId === undefined || favoriteId === null)
            throw new Error("The parameter 'favoriteId' must be defined.");
        url_ = url_.replace("{favoriteId}", encodeURIComponent("" + favoriteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFavoritesDELETE(_response);
        });
    }

    protected processFavoritesDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    favoritesPOST(body: FavoriteAddDto | undefined, cancelToken?: CancelToken): Promise<FavoriteDtoResponseModel> {
        let url_ = this.baseUrl + "/api/Favorites";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFavoritesPOST(_response);
        });
    }

    protected processFavoritesPOST(response: AxiosResponse): Promise<FavoriteDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = FavoriteDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<FavoriteDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FavoriteDtoResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    memberRanksGET(couponId: string, cancelToken?: CancelToken): Promise<MemberRankDto> {
        let url_ = this.baseUrl + "/api/MemberRanks/{couponId}";
        if (couponId === undefined || couponId === null)
            throw new Error("The parameter 'couponId' must be defined.");
        url_ = url_.replace("{couponId}", encodeURIComponent("" + couponId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMemberRanksGET(_response);
        });
    }

    protected processMemberRanksGET(response: AxiosResponse): Promise<MemberRankDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MemberRankDto.fromJS(resultData200);
            return Promise.resolve<MemberRankDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemberRankDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    memberRanksPUT(couponId: string, body: MemberRankUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/MemberRanks/{couponId}";
        if (couponId === undefined || couponId === null)
            throw new Error("The parameter 'couponId' must be defined.");
        url_ = url_.replace("{couponId}", encodeURIComponent("" + couponId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMemberRanksPUT(_response);
        });
    }

    protected processMemberRanksPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    memberRanksDELETE(couponId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/MemberRanks/{couponId}";
        if (couponId === undefined || couponId === null)
            throw new Error("The parameter 'couponId' must be defined.");
        url_ = url_.replace("{couponId}", encodeURIComponent("" + couponId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMemberRanksDELETE(_response);
        });
    }

    protected processMemberRanksDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    memberRanksPOST(body: MemberRankAddDto | undefined, cancelToken?: CancelToken): Promise<MemberRankDtoResponseModel> {
        let url_ = this.baseUrl + "/api/MemberRanks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMemberRanksPOST(_response);
        });
    }

    protected processMemberRanksPOST(response: AxiosResponse): Promise<MemberRankDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MemberRankDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<MemberRankDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemberRankDtoResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    ordersGET(orderId: string, cancelToken?: CancelToken): Promise<OrderDto> {
        let url_ = this.baseUrl + "/api/Orders/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrdersGET(_response);
        });
    }

    protected processOrdersGET(response: AxiosResponse): Promise<OrderDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OrderDto.fromJS(resultData200);
            return Promise.resolve<OrderDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    ordersPUT(orderId: string, body: OrderUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Orders/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrdersPUT(_response);
        });
    }

    protected processOrdersPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    ordersDELETE(orderId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Orders/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrdersDELETE(_response);
        });
    }

    protected processOrdersDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    ordersPOST(body: OrderAddDto | undefined, cancelToken?: CancelToken): Promise<OrderDtoResponseModel> {
        let url_ = this.baseUrl + "/api/Orders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrdersPOST(_response);
        });
    }

    protected processOrdersPOST(response: AxiosResponse): Promise<OrderDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OrderDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<OrderDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderDtoResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    orderShippingsGET(orderId: string, cancelToken?: CancelToken): Promise<OrderShippingDto> {
        let url_ = this.baseUrl + "/api/OrderShippings/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderShippingsGET(_response);
        });
    }

    protected processOrderShippingsGET(response: AxiosResponse): Promise<OrderShippingDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OrderShippingDto.fromJS(resultData200);
            return Promise.resolve<OrderShippingDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderShippingDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    orderShippingsPUT(orderId: string, body: OrderShippingUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/OrderShippings/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderShippingsPUT(_response);
        });
    }

    protected processOrderShippingsPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    orderShippingsDELETE(orderId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/OrderShippings/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderShippingsDELETE(_response);
        });
    }

    protected processOrderShippingsDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    orderShippingsPOST(body: OrderShippingAddDto | undefined, cancelToken?: CancelToken): Promise<OrderShippingDtoResponseModel> {
        let url_ = this.baseUrl + "/api/OrderShippings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOrderShippingsPOST(_response);
        });
    }

    protected processOrderShippingsPOST(response: AxiosResponse): Promise<OrderShippingDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OrderShippingDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<OrderShippingDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderShippingDtoResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    pointsGET(pointId: string, cancelToken?: CancelToken): Promise<PointDto> {
        let url_ = this.baseUrl + "/api/Points/{pointId}";
        if (pointId === undefined || pointId === null)
            throw new Error("The parameter 'pointId' must be defined.");
        url_ = url_.replace("{pointId}", encodeURIComponent("" + pointId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPointsGET(_response);
        });
    }

    protected processPointsGET(response: AxiosResponse): Promise<PointDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PointDto.fromJS(resultData200);
            return Promise.resolve<PointDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PointDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pointsPUT(pointId: string, body: PointUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Points/{pointId}";
        if (pointId === undefined || pointId === null)
            throw new Error("The parameter 'pointId' must be defined.");
        url_ = url_.replace("{pointId}", encodeURIComponent("" + pointId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPointsPUT(_response);
        });
    }

    protected processPointsPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    pointsDELETE(pointId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Points/{pointId}";
        if (pointId === undefined || pointId === null)
            throw new Error("The parameter 'pointId' must be defined.");
        url_ = url_.replace("{pointId}", encodeURIComponent("" + pointId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPointsDELETE(_response);
        });
    }

    protected processPointsDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pointsPOST(body: PointAddDto | undefined, cancelToken?: CancelToken): Promise<PointDtoResponseModel> {
        let url_ = this.baseUrl + "/api/Points";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPointsPOST(_response);
        });
    }

    protected processPointsPOST(response: AxiosResponse): Promise<PointDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PointDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<PointDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PointDtoResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    productsGET(id: string, cancelToken?: CancelToken): Promise<ProductDto> {
        let url_ = this.baseUrl + "/api/Products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductsGET(_response);
        });
    }

    protected processProductsGET(response: AxiosResponse): Promise<ProductDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductDto.fromJS(resultData200);
            return Promise.resolve<ProductDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDto>(null as any);
    }

    /**
     * @param searchText (optional) 
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    productsGET2(searchText: string | undefined, pageNumber: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken): Promise<ProductDtoPaginatedList> {
        let url_ = this.baseUrl + "/api/Products?";
        if (searchText === null)
            throw new Error("The parameter 'searchText' cannot be null.");
        else if (searchText !== undefined)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductsGET2(_response);
        });
    }

    protected processProductsGET2(response: AxiosResponse): Promise<ProductDtoPaginatedList> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductDtoPaginatedList.fromJS(resultData200);
            return Promise.resolve<ProductDtoPaginatedList>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDtoPaginatedList>(null as any);
    }

    /**
     * @param imageProduct (optional) 
     * @param writeDto (optional) 
     * @return Success
     */
    productsPOST(imageProduct: FileParameter | undefined, writeDto: ProductAddDto | undefined, cancelToken?: CancelToken): Promise<ProductDtoResponseModel> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (imageProduct === null || imageProduct === undefined)
            throw new Error("The parameter 'imageProduct' cannot be null.");
        else
            content_.append("imageProduct", imageProduct.data, imageProduct.fileName ? imageProduct.fileName : "imageProduct");
        if (writeDto === null || writeDto === undefined)
            throw new Error("The parameter 'writeDto' cannot be null.");
        else
            content_.append("writeDto", JSON.stringify(writeDto));

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductsPOST(_response);
        });
    }

    protected processProductsPOST(response: AxiosResponse): Promise<ProductDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<ProductDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDtoResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productsPUT(productId: string, body: ProductUpdateDto | undefined, cancelToken?: CancelToken): Promise<ProductDtoResponseModel> {
        let url_ = this.baseUrl + "/api/Products/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductsPUT(_response);
        });
    }

    protected processProductsPUT(response: AxiosResponse): Promise<ProductDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<ProductDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDtoResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    productsDELETE(productId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/Products/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductsDELETE(_response);
        });
    }

    protected processProductsDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    productStocksGET(id: string, cancelToken?: CancelToken): Promise<ProductStockDto> {
        let url_ = this.baseUrl + "/api/ProductStocks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductStocksGET(_response);
        });
    }

    protected processProductStocksGET(response: AxiosResponse): Promise<ProductStockDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductStockDto.fromJS(resultData200);
            return Promise.resolve<ProductStockDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductStockDto>(null as any);
    }

    /**
     * @param searchText (optional) 
     * @param status (optional) 
     * @param groupType (optional) 
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    productStocksGET2(searchText: string | undefined, status: boolean | undefined, groupType: number | undefined, pageNumber: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken): Promise<ProductStockDtoPaginatedList> {
        let url_ = this.baseUrl + "/api/ProductStocks?";
        if (searchText === null)
            throw new Error("The parameter 'searchText' cannot be null.");
        else if (searchText !== undefined)
            url_ += "SearchText=" + encodeURIComponent("" + searchText) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (groupType === null)
            throw new Error("The parameter 'groupType' cannot be null.");
        else if (groupType !== undefined)
            url_ += "GroupType=" + encodeURIComponent("" + groupType) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductStocksGET2(_response);
        });
    }

    protected processProductStocksGET2(response: AxiosResponse): Promise<ProductStockDtoPaginatedList> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductStockDtoPaginatedList.fromJS(resultData200);
            return Promise.resolve<ProductStockDtoPaginatedList>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductStockDtoPaginatedList>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productStocksPOST(body: ProductStockAddDto | undefined, cancelToken?: CancelToken): Promise<ProductStockDtoResponseModel> {
        let url_ = this.baseUrl + "/api/ProductStocks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductStocksPOST(_response);
        });
    }

    protected processProductStocksPOST(response: AxiosResponse): Promise<ProductStockDtoResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductStockDtoResponseModel.fromJS(resultData200);
            return Promise.resolve<ProductStockDtoResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductStockDtoResponseModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    productStocksPUT(productStockId: string, body: ProductStockUpdateDto | undefined, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/ProductStocks/{ProductStockId}";
        if (productStockId === undefined || productStockId === null)
            throw new Error("The parameter 'productStockId' must be defined.");
        url_ = url_.replace("{productStockId}", encodeURIComponent("" + productStockId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductStocksPUT(_response);
        });
    }

    protected processProductStocksPUT(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    productStocksDELETE(productStockId: string, cancelToken?: CancelToken): Promise<BooleanResponseModel> {
        let url_ = this.baseUrl + "/api/ProductStocks/{productStockId}";
        if (productStockId === undefined || productStockId === null)
            throw new Error("The parameter 'productStockId' must be defined.");
        url_ = url_.replace("{productStockId}", encodeURIComponent("" + productStockId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductStocksDELETE(_response);
        });
    }

    protected processProductStocksDELETE(response: AxiosResponse): Promise<BooleanResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BooleanResponseModel.fromJS(resultData200);
            return Promise.resolve<BooleanResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooleanResponseModel>(null as any);
    }
}

export class ApplicationUserDto {
    name?: string | null;
    userName?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    referredUserId?: string | null;
    id?: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.referredUserId = _data["referredUserId"] !== undefined ? _data["referredUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): ApplicationUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["referredUserId"] = this.referredUserId !== undefined ? this.referredUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data;
    }
}

export class BooleanResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: boolean;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] !== undefined ? _data["data"] : <any>null;
        }
    }

    static fromJS(data: any): BooleanResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data !== undefined ? this.data : <any>null;
        return data;
    }
}

export class CartAddDto {
    productId?: string;
    variationId?: string;
    productCount?: number;
    productSaleId?: number;
    fixedPurchaseFlg?: boolean;
    cartId?: number;
    cartItemNo?: number;
    userId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.variationId = _data["variationId"] !== undefined ? _data["variationId"] : <any>null;
            this.productCount = _data["productCount"] !== undefined ? _data["productCount"] : <any>null;
            this.productSaleId = _data["productSaleId"] !== undefined ? _data["productSaleId"] : <any>null;
            this.fixedPurchaseFlg = _data["fixedPurchaseFlg"] !== undefined ? _data["fixedPurchaseFlg"] : <any>null;
            this.cartId = _data["cartId"] !== undefined ? _data["cartId"] : <any>null;
            this.cartItemNo = _data["cartItemNo"] !== undefined ? _data["cartItemNo"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): CartAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new CartAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["variationId"] = this.variationId !== undefined ? this.variationId : <any>null;
        data["productCount"] = this.productCount !== undefined ? this.productCount : <any>null;
        data["productSaleId"] = this.productSaleId !== undefined ? this.productSaleId : <any>null;
        data["fixedPurchaseFlg"] = this.fixedPurchaseFlg !== undefined ? this.fixedPurchaseFlg : <any>null;
        data["cartId"] = this.cartId !== undefined ? this.cartId : <any>null;
        data["cartItemNo"] = this.cartItemNo !== undefined ? this.cartItemNo : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class CartDto {
    productId?: string;
    variationId?: string;
    productCount?: number;
    productSaleId?: number;
    fixedPurchaseFlg?: boolean;
    cartId?: number;
    cartItemNo?: number;
    userId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.variationId = _data["variationId"] !== undefined ? _data["variationId"] : <any>null;
            this.productCount = _data["productCount"] !== undefined ? _data["productCount"] : <any>null;
            this.productSaleId = _data["productSaleId"] !== undefined ? _data["productSaleId"] : <any>null;
            this.fixedPurchaseFlg = _data["fixedPurchaseFlg"] !== undefined ? _data["fixedPurchaseFlg"] : <any>null;
            this.cartId = _data["cartId"] !== undefined ? _data["cartId"] : <any>null;
            this.cartItemNo = _data["cartItemNo"] !== undefined ? _data["cartItemNo"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): CartDto {
        data = typeof data === 'object' ? data : {};
        let result = new CartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["variationId"] = this.variationId !== undefined ? this.variationId : <any>null;
        data["productCount"] = this.productCount !== undefined ? this.productCount : <any>null;
        data["productSaleId"] = this.productSaleId !== undefined ? this.productSaleId : <any>null;
        data["fixedPurchaseFlg"] = this.fixedPurchaseFlg !== undefined ? this.fixedPurchaseFlg : <any>null;
        data["cartId"] = this.cartId !== undefined ? this.cartId : <any>null;
        data["cartItemNo"] = this.cartItemNo !== undefined ? this.cartItemNo : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class CartDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: CartDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? CartDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): CartDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new CartDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class CartUpdateDto {
    productId?: string;
    variationId?: string;
    productCount?: number;
    productSaleId?: number;
    fixedPurchaseFlg?: boolean;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.variationId = _data["variationId"] !== undefined ? _data["variationId"] : <any>null;
            this.productCount = _data["productCount"] !== undefined ? _data["productCount"] : <any>null;
            this.productSaleId = _data["productSaleId"] !== undefined ? _data["productSaleId"] : <any>null;
            this.fixedPurchaseFlg = _data["fixedPurchaseFlg"] !== undefined ? _data["fixedPurchaseFlg"] : <any>null;
        }
    }

    static fromJS(data: any): CartUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CartUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["variationId"] = this.variationId !== undefined ? this.variationId : <any>null;
        data["productCount"] = this.productCount !== undefined ? this.productCount : <any>null;
        data["productSaleId"] = this.productSaleId !== undefined ? this.productSaleId : <any>null;
        data["fixedPurchaseFlg"] = this.fixedPurchaseFlg !== undefined ? this.fixedPurchaseFlg : <any>null;
        return data;
    }
}

export class CouponAddDto {
    couponNameCode?: string | null;
    couponName?: string | null;
    status?: boolean;
    expireDateCoupBgn?: Date;
    expireDateCoupEnd?: Date;
    discountRate?: number;
    discountPrice?: number;
    freeShippingFlg?: boolean;
    couponId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.couponNameCode = _data["couponNameCode"] !== undefined ? _data["couponNameCode"] : <any>null;
            this.couponName = _data["couponName"] !== undefined ? _data["couponName"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.expireDateCoupBgn = _data["expireDateCoupBgn"] ? new Date(_data["expireDateCoupBgn"].toString()) : <any>null;
            this.expireDateCoupEnd = _data["expireDateCoupEnd"] ? new Date(_data["expireDateCoupEnd"].toString()) : <any>null;
            this.discountRate = _data["discountRate"] !== undefined ? _data["discountRate"] : <any>null;
            this.discountPrice = _data["discountPrice"] !== undefined ? _data["discountPrice"] : <any>null;
            this.freeShippingFlg = _data["freeShippingFlg"] !== undefined ? _data["freeShippingFlg"] : <any>null;
            this.couponId = _data["couponId"] !== undefined ? _data["couponId"] : <any>null;
        }
    }

    static fromJS(data: any): CouponAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new CouponAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["couponNameCode"] = this.couponNameCode !== undefined ? this.couponNameCode : <any>null;
        data["couponName"] = this.couponName !== undefined ? this.couponName : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["expireDateCoupBgn"] = this.expireDateCoupBgn ? this.expireDateCoupBgn.toISOString() : <any>null;
        data["expireDateCoupEnd"] = this.expireDateCoupEnd ? this.expireDateCoupEnd.toISOString() : <any>null;
        data["discountRate"] = this.discountRate !== undefined ? this.discountRate : <any>null;
        data["discountPrice"] = this.discountPrice !== undefined ? this.discountPrice : <any>null;
        data["freeShippingFlg"] = this.freeShippingFlg !== undefined ? this.freeShippingFlg : <any>null;
        data["couponId"] = this.couponId !== undefined ? this.couponId : <any>null;
        return data;
    }
}

export class CouponDto {
    couponNameCode?: string | null;
    couponName?: string | null;
    status?: boolean;
    expireDateCoupBgn?: Date;
    expireDateCoupEnd?: Date;
    discountRate?: number;
    discountPrice?: number;
    freeShippingFlg?: boolean;
    couponId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.couponNameCode = _data["couponNameCode"] !== undefined ? _data["couponNameCode"] : <any>null;
            this.couponName = _data["couponName"] !== undefined ? _data["couponName"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.expireDateCoupBgn = _data["expireDateCoupBgn"] ? new Date(_data["expireDateCoupBgn"].toString()) : <any>null;
            this.expireDateCoupEnd = _data["expireDateCoupEnd"] ? new Date(_data["expireDateCoupEnd"].toString()) : <any>null;
            this.discountRate = _data["discountRate"] !== undefined ? _data["discountRate"] : <any>null;
            this.discountPrice = _data["discountPrice"] !== undefined ? _data["discountPrice"] : <any>null;
            this.freeShippingFlg = _data["freeShippingFlg"] !== undefined ? _data["freeShippingFlg"] : <any>null;
            this.couponId = _data["couponId"] !== undefined ? _data["couponId"] : <any>null;
        }
    }

    static fromJS(data: any): CouponDto {
        data = typeof data === 'object' ? data : {};
        let result = new CouponDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["couponNameCode"] = this.couponNameCode !== undefined ? this.couponNameCode : <any>null;
        data["couponName"] = this.couponName !== undefined ? this.couponName : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["expireDateCoupBgn"] = this.expireDateCoupBgn ? this.expireDateCoupBgn.toISOString() : <any>null;
        data["expireDateCoupEnd"] = this.expireDateCoupEnd ? this.expireDateCoupEnd.toISOString() : <any>null;
        data["discountRate"] = this.discountRate !== undefined ? this.discountRate : <any>null;
        data["discountPrice"] = this.discountPrice !== undefined ? this.discountPrice : <any>null;
        data["freeShippingFlg"] = this.freeShippingFlg !== undefined ? this.freeShippingFlg : <any>null;
        data["couponId"] = this.couponId !== undefined ? this.couponId : <any>null;
        return data;
    }
}

export class CouponDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: CouponDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? CouponDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): CouponDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new CouponDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class CouponUpdateDto {
    couponNameCode?: string | null;
    couponName?: string | null;
    status?: boolean;
    expireDateCoupBgn?: Date;
    expireDateCoupEnd?: Date;
    discountRate?: number;
    discountPrice?: number;
    freeShippingFlg?: boolean;

    init(_data?: any) {
        if (_data) {
            this.couponNameCode = _data["couponNameCode"] !== undefined ? _data["couponNameCode"] : <any>null;
            this.couponName = _data["couponName"] !== undefined ? _data["couponName"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.expireDateCoupBgn = _data["expireDateCoupBgn"] ? new Date(_data["expireDateCoupBgn"].toString()) : <any>null;
            this.expireDateCoupEnd = _data["expireDateCoupEnd"] ? new Date(_data["expireDateCoupEnd"].toString()) : <any>null;
            this.discountRate = _data["discountRate"] !== undefined ? _data["discountRate"] : <any>null;
            this.discountPrice = _data["discountPrice"] !== undefined ? _data["discountPrice"] : <any>null;
            this.freeShippingFlg = _data["freeShippingFlg"] !== undefined ? _data["freeShippingFlg"] : <any>null;
        }
    }

    static fromJS(data: any): CouponUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CouponUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["couponNameCode"] = this.couponNameCode !== undefined ? this.couponNameCode : <any>null;
        data["couponName"] = this.couponName !== undefined ? this.couponName : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["expireDateCoupBgn"] = this.expireDateCoupBgn ? this.expireDateCoupBgn.toISOString() : <any>null;
        data["expireDateCoupEnd"] = this.expireDateCoupEnd ? this.expireDateCoupEnd.toISOString() : <any>null;
        data["discountRate"] = this.discountRate !== undefined ? this.discountRate : <any>null;
        data["discountPrice"] = this.discountPrice !== undefined ? this.discountPrice : <any>null;
        data["freeShippingFlg"] = this.freeShippingFlg !== undefined ? this.freeShippingFlg : <any>null;
        return data;
    }
}

export class FavoriteAddDto {

    init(_data?: any) {
    }

    static fromJS(data: any): FavoriteAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new FavoriteAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class FavoriteDto {

    init(_data?: any) {
    }

    static fromJS(data: any): FavoriteDto {
        data = typeof data === 'object' ? data : {};
        let result = new FavoriteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class FavoriteDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: FavoriteDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? FavoriteDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): FavoriteDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new FavoriteDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class FavoriteUpdateDto {

    init(_data?: any) {
    }

    static fromJS(data: any): FavoriteUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new FavoriteUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class LoginRequest {
    userName!: string;
    password!: string;

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export class MemberRankAddDto {

    init(_data?: any) {
    }

    static fromJS(data: any): MemberRankAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new MemberRankAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class MemberRankDto {

    init(_data?: any) {
    }

    static fromJS(data: any): MemberRankDto {
        data = typeof data === 'object' ? data : {};
        let result = new MemberRankDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class MemberRankDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: MemberRankDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? MemberRankDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): MemberRankDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new MemberRankDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class MemberRankUpdateDto {

    init(_data?: any) {
    }

    static fromJS(data: any): MemberRankUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new MemberRankUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class OrderAddDto {
    orderStatus?: string | null;
    orderDate?: Date | null;
    orderRecognitionDate?: Date | null;
    orderStockReservedStatus?: string | null;
    orderStockReservedDate?: Date | null;
    orderShippingDate?: Date | null;
    orderShippedStatus?: string | null;
    orderShippedDate?: Date | null;
    orderDeliveringDate?: Date | null;
    orderCancelDate?: Date | null;
    orderReturnDate?: Date | null;
    orderPaymentStatus?: string | null;
    orderPaymentDate?: Date | null;
    orderItemCount?: number;
    orderProductCount?: number;
    orderPricePack?: number;
    orderPriceTax?: number;
    orderPriceShipping?: number;
    orderPriceExchange?: number;
    orderPriceTotal?: number;
    orderDiscountSetPrice?: number;
    orderPointUse?: number;
    orderPointUseVnd?: number;
    orderPointAdd?: number;
    orderCouponUse?: number;
    orderId?: string | null;
    userId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.orderStatus = _data["orderStatus"] !== undefined ? _data["orderStatus"] : <any>null;
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
            this.orderRecognitionDate = _data["orderRecognitionDate"] ? new Date(_data["orderRecognitionDate"].toString()) : <any>null;
            this.orderStockReservedStatus = _data["orderStockReservedStatus"] !== undefined ? _data["orderStockReservedStatus"] : <any>null;
            this.orderStockReservedDate = _data["orderStockReservedDate"] ? new Date(_data["orderStockReservedDate"].toString()) : <any>null;
            this.orderShippingDate = _data["orderShippingDate"] ? new Date(_data["orderShippingDate"].toString()) : <any>null;
            this.orderShippedStatus = _data["orderShippedStatus"] !== undefined ? _data["orderShippedStatus"] : <any>null;
            this.orderShippedDate = _data["orderShippedDate"] ? new Date(_data["orderShippedDate"].toString()) : <any>null;
            this.orderDeliveringDate = _data["orderDeliveringDate"] ? new Date(_data["orderDeliveringDate"].toString()) : <any>null;
            this.orderCancelDate = _data["orderCancelDate"] ? new Date(_data["orderCancelDate"].toString()) : <any>null;
            this.orderReturnDate = _data["orderReturnDate"] ? new Date(_data["orderReturnDate"].toString()) : <any>null;
            this.orderPaymentStatus = _data["orderPaymentStatus"] !== undefined ? _data["orderPaymentStatus"] : <any>null;
            this.orderPaymentDate = _data["orderPaymentDate"] ? new Date(_data["orderPaymentDate"].toString()) : <any>null;
            this.orderItemCount = _data["orderItemCount"] !== undefined ? _data["orderItemCount"] : <any>null;
            this.orderProductCount = _data["orderProductCount"] !== undefined ? _data["orderProductCount"] : <any>null;
            this.orderPricePack = _data["orderPricePack"] !== undefined ? _data["orderPricePack"] : <any>null;
            this.orderPriceTax = _data["orderPriceTax"] !== undefined ? _data["orderPriceTax"] : <any>null;
            this.orderPriceShipping = _data["orderPriceShipping"] !== undefined ? _data["orderPriceShipping"] : <any>null;
            this.orderPriceExchange = _data["orderPriceExchange"] !== undefined ? _data["orderPriceExchange"] : <any>null;
            this.orderPriceTotal = _data["orderPriceTotal"] !== undefined ? _data["orderPriceTotal"] : <any>null;
            this.orderDiscountSetPrice = _data["orderDiscountSetPrice"] !== undefined ? _data["orderDiscountSetPrice"] : <any>null;
            this.orderPointUse = _data["orderPointUse"] !== undefined ? _data["orderPointUse"] : <any>null;
            this.orderPointUseVnd = _data["orderPointUseVnd"] !== undefined ? _data["orderPointUseVnd"] : <any>null;
            this.orderPointAdd = _data["orderPointAdd"] !== undefined ? _data["orderPointAdd"] : <any>null;
            this.orderCouponUse = _data["orderCouponUse"] !== undefined ? _data["orderCouponUse"] : <any>null;
            this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): OrderAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderStatus"] = this.orderStatus !== undefined ? this.orderStatus : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        data["orderRecognitionDate"] = this.orderRecognitionDate ? this.orderRecognitionDate.toISOString() : <any>null;
        data["orderStockReservedStatus"] = this.orderStockReservedStatus !== undefined ? this.orderStockReservedStatus : <any>null;
        data["orderStockReservedDate"] = this.orderStockReservedDate ? this.orderStockReservedDate.toISOString() : <any>null;
        data["orderShippingDate"] = this.orderShippingDate ? this.orderShippingDate.toISOString() : <any>null;
        data["orderShippedStatus"] = this.orderShippedStatus !== undefined ? this.orderShippedStatus : <any>null;
        data["orderShippedDate"] = this.orderShippedDate ? this.orderShippedDate.toISOString() : <any>null;
        data["orderDeliveringDate"] = this.orderDeliveringDate ? this.orderDeliveringDate.toISOString() : <any>null;
        data["orderCancelDate"] = this.orderCancelDate ? this.orderCancelDate.toISOString() : <any>null;
        data["orderReturnDate"] = this.orderReturnDate ? this.orderReturnDate.toISOString() : <any>null;
        data["orderPaymentStatus"] = this.orderPaymentStatus !== undefined ? this.orderPaymentStatus : <any>null;
        data["orderPaymentDate"] = this.orderPaymentDate ? this.orderPaymentDate.toISOString() : <any>null;
        data["orderItemCount"] = this.orderItemCount !== undefined ? this.orderItemCount : <any>null;
        data["orderProductCount"] = this.orderProductCount !== undefined ? this.orderProductCount : <any>null;
        data["orderPricePack"] = this.orderPricePack !== undefined ? this.orderPricePack : <any>null;
        data["orderPriceTax"] = this.orderPriceTax !== undefined ? this.orderPriceTax : <any>null;
        data["orderPriceShipping"] = this.orderPriceShipping !== undefined ? this.orderPriceShipping : <any>null;
        data["orderPriceExchange"] = this.orderPriceExchange !== undefined ? this.orderPriceExchange : <any>null;
        data["orderPriceTotal"] = this.orderPriceTotal !== undefined ? this.orderPriceTotal : <any>null;
        data["orderDiscountSetPrice"] = this.orderDiscountSetPrice !== undefined ? this.orderDiscountSetPrice : <any>null;
        data["orderPointUse"] = this.orderPointUse !== undefined ? this.orderPointUse : <any>null;
        data["orderPointUseVnd"] = this.orderPointUseVnd !== undefined ? this.orderPointUseVnd : <any>null;
        data["orderPointAdd"] = this.orderPointAdd !== undefined ? this.orderPointAdd : <any>null;
        data["orderCouponUse"] = this.orderCouponUse !== undefined ? this.orderCouponUse : <any>null;
        data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class OrderDto {
    orderStatus?: string | null;
    orderDate?: Date | null;
    orderRecognitionDate?: Date | null;
    orderStockReservedStatus?: string | null;
    orderStockReservedDate?: Date | null;
    orderShippingDate?: Date | null;
    orderShippedStatus?: string | null;
    orderShippedDate?: Date | null;
    orderDeliveringDate?: Date | null;
    orderCancelDate?: Date | null;
    orderReturnDate?: Date | null;
    orderPaymentStatus?: string | null;
    orderPaymentDate?: Date | null;
    orderItemCount?: number;
    orderProductCount?: number;
    orderPricePack?: number;
    orderPriceTax?: number;
    orderPriceShipping?: number;
    orderPriceExchange?: number;
    orderPriceTotal?: number;
    orderDiscountSetPrice?: number;
    orderPointUse?: number;
    orderPointUseVnd?: number;
    orderPointAdd?: number;
    orderCouponUse?: number;
    orderId?: string | null;
    userId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.orderStatus = _data["orderStatus"] !== undefined ? _data["orderStatus"] : <any>null;
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
            this.orderRecognitionDate = _data["orderRecognitionDate"] ? new Date(_data["orderRecognitionDate"].toString()) : <any>null;
            this.orderStockReservedStatus = _data["orderStockReservedStatus"] !== undefined ? _data["orderStockReservedStatus"] : <any>null;
            this.orderStockReservedDate = _data["orderStockReservedDate"] ? new Date(_data["orderStockReservedDate"].toString()) : <any>null;
            this.orderShippingDate = _data["orderShippingDate"] ? new Date(_data["orderShippingDate"].toString()) : <any>null;
            this.orderShippedStatus = _data["orderShippedStatus"] !== undefined ? _data["orderShippedStatus"] : <any>null;
            this.orderShippedDate = _data["orderShippedDate"] ? new Date(_data["orderShippedDate"].toString()) : <any>null;
            this.orderDeliveringDate = _data["orderDeliveringDate"] ? new Date(_data["orderDeliveringDate"].toString()) : <any>null;
            this.orderCancelDate = _data["orderCancelDate"] ? new Date(_data["orderCancelDate"].toString()) : <any>null;
            this.orderReturnDate = _data["orderReturnDate"] ? new Date(_data["orderReturnDate"].toString()) : <any>null;
            this.orderPaymentStatus = _data["orderPaymentStatus"] !== undefined ? _data["orderPaymentStatus"] : <any>null;
            this.orderPaymentDate = _data["orderPaymentDate"] ? new Date(_data["orderPaymentDate"].toString()) : <any>null;
            this.orderItemCount = _data["orderItemCount"] !== undefined ? _data["orderItemCount"] : <any>null;
            this.orderProductCount = _data["orderProductCount"] !== undefined ? _data["orderProductCount"] : <any>null;
            this.orderPricePack = _data["orderPricePack"] !== undefined ? _data["orderPricePack"] : <any>null;
            this.orderPriceTax = _data["orderPriceTax"] !== undefined ? _data["orderPriceTax"] : <any>null;
            this.orderPriceShipping = _data["orderPriceShipping"] !== undefined ? _data["orderPriceShipping"] : <any>null;
            this.orderPriceExchange = _data["orderPriceExchange"] !== undefined ? _data["orderPriceExchange"] : <any>null;
            this.orderPriceTotal = _data["orderPriceTotal"] !== undefined ? _data["orderPriceTotal"] : <any>null;
            this.orderDiscountSetPrice = _data["orderDiscountSetPrice"] !== undefined ? _data["orderDiscountSetPrice"] : <any>null;
            this.orderPointUse = _data["orderPointUse"] !== undefined ? _data["orderPointUse"] : <any>null;
            this.orderPointUseVnd = _data["orderPointUseVnd"] !== undefined ? _data["orderPointUseVnd"] : <any>null;
            this.orderPointAdd = _data["orderPointAdd"] !== undefined ? _data["orderPointAdd"] : <any>null;
            this.orderCouponUse = _data["orderCouponUse"] !== undefined ? _data["orderCouponUse"] : <any>null;
            this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderStatus"] = this.orderStatus !== undefined ? this.orderStatus : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        data["orderRecognitionDate"] = this.orderRecognitionDate ? this.orderRecognitionDate.toISOString() : <any>null;
        data["orderStockReservedStatus"] = this.orderStockReservedStatus !== undefined ? this.orderStockReservedStatus : <any>null;
        data["orderStockReservedDate"] = this.orderStockReservedDate ? this.orderStockReservedDate.toISOString() : <any>null;
        data["orderShippingDate"] = this.orderShippingDate ? this.orderShippingDate.toISOString() : <any>null;
        data["orderShippedStatus"] = this.orderShippedStatus !== undefined ? this.orderShippedStatus : <any>null;
        data["orderShippedDate"] = this.orderShippedDate ? this.orderShippedDate.toISOString() : <any>null;
        data["orderDeliveringDate"] = this.orderDeliveringDate ? this.orderDeliveringDate.toISOString() : <any>null;
        data["orderCancelDate"] = this.orderCancelDate ? this.orderCancelDate.toISOString() : <any>null;
        data["orderReturnDate"] = this.orderReturnDate ? this.orderReturnDate.toISOString() : <any>null;
        data["orderPaymentStatus"] = this.orderPaymentStatus !== undefined ? this.orderPaymentStatus : <any>null;
        data["orderPaymentDate"] = this.orderPaymentDate ? this.orderPaymentDate.toISOString() : <any>null;
        data["orderItemCount"] = this.orderItemCount !== undefined ? this.orderItemCount : <any>null;
        data["orderProductCount"] = this.orderProductCount !== undefined ? this.orderProductCount : <any>null;
        data["orderPricePack"] = this.orderPricePack !== undefined ? this.orderPricePack : <any>null;
        data["orderPriceTax"] = this.orderPriceTax !== undefined ? this.orderPriceTax : <any>null;
        data["orderPriceShipping"] = this.orderPriceShipping !== undefined ? this.orderPriceShipping : <any>null;
        data["orderPriceExchange"] = this.orderPriceExchange !== undefined ? this.orderPriceExchange : <any>null;
        data["orderPriceTotal"] = this.orderPriceTotal !== undefined ? this.orderPriceTotal : <any>null;
        data["orderDiscountSetPrice"] = this.orderDiscountSetPrice !== undefined ? this.orderDiscountSetPrice : <any>null;
        data["orderPointUse"] = this.orderPointUse !== undefined ? this.orderPointUse : <any>null;
        data["orderPointUseVnd"] = this.orderPointUseVnd !== undefined ? this.orderPointUseVnd : <any>null;
        data["orderPointAdd"] = this.orderPointAdd !== undefined ? this.orderPointAdd : <any>null;
        data["orderCouponUse"] = this.orderCouponUse !== undefined ? this.orderCouponUse : <any>null;
        data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class OrderDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: OrderDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? OrderDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): OrderDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class OrderShippingAddDto {

    init(_data?: any) {
    }

    static fromJS(data: any): OrderShippingAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderShippingAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class OrderShippingDto {

    init(_data?: any) {
    }

    static fromJS(data: any): OrderShippingDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderShippingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class OrderShippingDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: OrderShippingDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? OrderShippingDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): OrderShippingDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new OrderShippingDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class OrderShippingUpdateDto {

    init(_data?: any) {
    }

    static fromJS(data: any): OrderShippingUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderShippingUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class OrderUpdateDto {
    orderStatus?: string | null;
    orderDate?: Date | null;
    orderRecognitionDate?: Date | null;
    orderStockReservedStatus?: string | null;
    orderStockReservedDate?: Date | null;
    orderShippingDate?: Date | null;
    orderShippedStatus?: string | null;
    orderShippedDate?: Date | null;
    orderDeliveringDate?: Date | null;
    orderCancelDate?: Date | null;
    orderReturnDate?: Date | null;
    orderPaymentStatus?: string | null;
    orderPaymentDate?: Date | null;
    orderItemCount?: number;
    orderProductCount?: number;
    orderPricePack?: number;
    orderPriceTax?: number;
    orderPriceShipping?: number;
    orderPriceExchange?: number;
    orderPriceTotal?: number;
    orderDiscountSetPrice?: number;
    orderPointUse?: number;
    orderPointUseVnd?: number;
    orderPointAdd?: number;
    orderCouponUse?: number;

    init(_data?: any) {
        if (_data) {
            this.orderStatus = _data["orderStatus"] !== undefined ? _data["orderStatus"] : <any>null;
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>null;
            this.orderRecognitionDate = _data["orderRecognitionDate"] ? new Date(_data["orderRecognitionDate"].toString()) : <any>null;
            this.orderStockReservedStatus = _data["orderStockReservedStatus"] !== undefined ? _data["orderStockReservedStatus"] : <any>null;
            this.orderStockReservedDate = _data["orderStockReservedDate"] ? new Date(_data["orderStockReservedDate"].toString()) : <any>null;
            this.orderShippingDate = _data["orderShippingDate"] ? new Date(_data["orderShippingDate"].toString()) : <any>null;
            this.orderShippedStatus = _data["orderShippedStatus"] !== undefined ? _data["orderShippedStatus"] : <any>null;
            this.orderShippedDate = _data["orderShippedDate"] ? new Date(_data["orderShippedDate"].toString()) : <any>null;
            this.orderDeliveringDate = _data["orderDeliveringDate"] ? new Date(_data["orderDeliveringDate"].toString()) : <any>null;
            this.orderCancelDate = _data["orderCancelDate"] ? new Date(_data["orderCancelDate"].toString()) : <any>null;
            this.orderReturnDate = _data["orderReturnDate"] ? new Date(_data["orderReturnDate"].toString()) : <any>null;
            this.orderPaymentStatus = _data["orderPaymentStatus"] !== undefined ? _data["orderPaymentStatus"] : <any>null;
            this.orderPaymentDate = _data["orderPaymentDate"] ? new Date(_data["orderPaymentDate"].toString()) : <any>null;
            this.orderItemCount = _data["orderItemCount"] !== undefined ? _data["orderItemCount"] : <any>null;
            this.orderProductCount = _data["orderProductCount"] !== undefined ? _data["orderProductCount"] : <any>null;
            this.orderPricePack = _data["orderPricePack"] !== undefined ? _data["orderPricePack"] : <any>null;
            this.orderPriceTax = _data["orderPriceTax"] !== undefined ? _data["orderPriceTax"] : <any>null;
            this.orderPriceShipping = _data["orderPriceShipping"] !== undefined ? _data["orderPriceShipping"] : <any>null;
            this.orderPriceExchange = _data["orderPriceExchange"] !== undefined ? _data["orderPriceExchange"] : <any>null;
            this.orderPriceTotal = _data["orderPriceTotal"] !== undefined ? _data["orderPriceTotal"] : <any>null;
            this.orderDiscountSetPrice = _data["orderDiscountSetPrice"] !== undefined ? _data["orderDiscountSetPrice"] : <any>null;
            this.orderPointUse = _data["orderPointUse"] !== undefined ? _data["orderPointUse"] : <any>null;
            this.orderPointUseVnd = _data["orderPointUseVnd"] !== undefined ? _data["orderPointUseVnd"] : <any>null;
            this.orderPointAdd = _data["orderPointAdd"] !== undefined ? _data["orderPointAdd"] : <any>null;
            this.orderCouponUse = _data["orderCouponUse"] !== undefined ? _data["orderCouponUse"] : <any>null;
        }
    }

    static fromJS(data: any): OrderUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderStatus"] = this.orderStatus !== undefined ? this.orderStatus : <any>null;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>null;
        data["orderRecognitionDate"] = this.orderRecognitionDate ? this.orderRecognitionDate.toISOString() : <any>null;
        data["orderStockReservedStatus"] = this.orderStockReservedStatus !== undefined ? this.orderStockReservedStatus : <any>null;
        data["orderStockReservedDate"] = this.orderStockReservedDate ? this.orderStockReservedDate.toISOString() : <any>null;
        data["orderShippingDate"] = this.orderShippingDate ? this.orderShippingDate.toISOString() : <any>null;
        data["orderShippedStatus"] = this.orderShippedStatus !== undefined ? this.orderShippedStatus : <any>null;
        data["orderShippedDate"] = this.orderShippedDate ? this.orderShippedDate.toISOString() : <any>null;
        data["orderDeliveringDate"] = this.orderDeliveringDate ? this.orderDeliveringDate.toISOString() : <any>null;
        data["orderCancelDate"] = this.orderCancelDate ? this.orderCancelDate.toISOString() : <any>null;
        data["orderReturnDate"] = this.orderReturnDate ? this.orderReturnDate.toISOString() : <any>null;
        data["orderPaymentStatus"] = this.orderPaymentStatus !== undefined ? this.orderPaymentStatus : <any>null;
        data["orderPaymentDate"] = this.orderPaymentDate ? this.orderPaymentDate.toISOString() : <any>null;
        data["orderItemCount"] = this.orderItemCount !== undefined ? this.orderItemCount : <any>null;
        data["orderProductCount"] = this.orderProductCount !== undefined ? this.orderProductCount : <any>null;
        data["orderPricePack"] = this.orderPricePack !== undefined ? this.orderPricePack : <any>null;
        data["orderPriceTax"] = this.orderPriceTax !== undefined ? this.orderPriceTax : <any>null;
        data["orderPriceShipping"] = this.orderPriceShipping !== undefined ? this.orderPriceShipping : <any>null;
        data["orderPriceExchange"] = this.orderPriceExchange !== undefined ? this.orderPriceExchange : <any>null;
        data["orderPriceTotal"] = this.orderPriceTotal !== undefined ? this.orderPriceTotal : <any>null;
        data["orderDiscountSetPrice"] = this.orderDiscountSetPrice !== undefined ? this.orderDiscountSetPrice : <any>null;
        data["orderPointUse"] = this.orderPointUse !== undefined ? this.orderPointUse : <any>null;
        data["orderPointUseVnd"] = this.orderPointUseVnd !== undefined ? this.orderPointUseVnd : <any>null;
        data["orderPointAdd"] = this.orderPointAdd !== undefined ? this.orderPointAdd : <any>null;
        data["orderCouponUse"] = this.orderCouponUse !== undefined ? this.orderCouponUse : <any>null;
        return data;
    }
}

export class PointAddDto {
    pointId?: string;
    userId?: string;
    totalPoint?: number;

    init(_data?: any) {
        if (_data) {
            this.pointId = _data["pointId"] !== undefined ? _data["pointId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.totalPoint = _data["totalPoint"] !== undefined ? _data["totalPoint"] : <any>null;
        }
    }

    static fromJS(data: any): PointAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new PointAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pointId"] = this.pointId !== undefined ? this.pointId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["totalPoint"] = this.totalPoint !== undefined ? this.totalPoint : <any>null;
        return data;
    }
}

export class PointDto {
    totalPoint?: number;

    init(_data?: any) {
        if (_data) {
            this.totalPoint = _data["totalPoint"] !== undefined ? _data["totalPoint"] : <any>null;
        }
    }

    static fromJS(data: any): PointDto {
        data = typeof data === 'object' ? data : {};
        let result = new PointDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPoint"] = this.totalPoint !== undefined ? this.totalPoint : <any>null;
        return data;
    }
}

export class PointDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: PointDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? PointDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): PointDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new PointDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class PointUpdateDto {
    totalPoint?: number;

    init(_data?: any) {
        if (_data) {
            this.totalPoint = _data["totalPoint"] !== undefined ? _data["totalPoint"] : <any>null;
        }
    }

    static fromJS(data: any): PointUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new PointUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPoint"] = this.totalPoint !== undefined ? this.totalPoint : <any>null;
        return data;
    }
}

export class ProductAddDto {
    productId?: string;
    productName?: string | null;
    displayPrice?: number;
    displaySpecialPrice?: number;
    sellFrom?: Date;
    sellTo?: Date;
    displayFrom?: Date;
    displayTo?: Date;
    shippingChargeFreeFlg?: boolean;
    maxSellQuantity?: number;
    listImageId?: string | null;
    priceShipping?: string | null;
    shippingType?: string | null;
    shippingSizeKbn?: string | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.displayPrice = _data["displayPrice"] !== undefined ? _data["displayPrice"] : <any>null;
            this.displaySpecialPrice = _data["displaySpecialPrice"] !== undefined ? _data["displaySpecialPrice"] : <any>null;
            this.sellFrom = _data["sellFrom"] ? new Date(_data["sellFrom"].toString()) : <any>null;
            this.sellTo = _data["sellTo"] ? new Date(_data["sellTo"].toString()) : <any>null;
            this.displayFrom = _data["displayFrom"] ? new Date(_data["displayFrom"].toString()) : <any>null;
            this.displayTo = _data["displayTo"] ? new Date(_data["displayTo"].toString()) : <any>null;
            this.shippingChargeFreeFlg = _data["shippingChargeFreeFlg"] !== undefined ? _data["shippingChargeFreeFlg"] : <any>null;
            this.maxSellQuantity = _data["maxSellQuantity"] !== undefined ? _data["maxSellQuantity"] : <any>null;
            this.listImageId = _data["listImageId"] !== undefined ? _data["listImageId"] : <any>null;
            this.priceShipping = _data["priceShipping"] !== undefined ? _data["priceShipping"] : <any>null;
            this.shippingType = _data["shippingType"] !== undefined ? _data["shippingType"] : <any>null;
            this.shippingSizeKbn = _data["shippingSizeKbn"] !== undefined ? _data["shippingSizeKbn"] : <any>null;
        }
    }

    static fromJS(data: any): ProductAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["displayPrice"] = this.displayPrice !== undefined ? this.displayPrice : <any>null;
        data["displaySpecialPrice"] = this.displaySpecialPrice !== undefined ? this.displaySpecialPrice : <any>null;
        data["sellFrom"] = this.sellFrom ? this.sellFrom.toISOString() : <any>null;
        data["sellTo"] = this.sellTo ? this.sellTo.toISOString() : <any>null;
        data["displayFrom"] = this.displayFrom ? this.displayFrom.toISOString() : <any>null;
        data["displayTo"] = this.displayTo ? this.displayTo.toISOString() : <any>null;
        data["shippingChargeFreeFlg"] = this.shippingChargeFreeFlg !== undefined ? this.shippingChargeFreeFlg : <any>null;
        data["maxSellQuantity"] = this.maxSellQuantity !== undefined ? this.maxSellQuantity : <any>null;
        data["listImageId"] = this.listImageId !== undefined ? this.listImageId : <any>null;
        data["priceShipping"] = this.priceShipping !== undefined ? this.priceShipping : <any>null;
        data["shippingType"] = this.shippingType !== undefined ? this.shippingType : <any>null;
        data["shippingSizeKbn"] = this.shippingSizeKbn !== undefined ? this.shippingSizeKbn : <any>null;
        return data;
    }
}

export class ProductDto {
    productName?: string | null;
    displayPrice?: number;
    displaySpecialPrice?: number;
    sellFrom?: Date;
    sellTo?: Date;
    displayFrom?: Date;
    displayTo?: Date;
    shippingChargeFreeFlg?: boolean;
    maxSellQuantity?: number;
    listImageId?: string | null;
    priceShipping?: string | null;
    shippingType?: string | null;
    shippingSizeKbn?: string | null;
    productId?: string;
    shopId?: number;
    created?: Date;
    createdBy?: string | null;
    lastModified?: Date;
    lastModifiedBy?: string | null;

    init(_data?: any) {
        if (_data) {
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.displayPrice = _data["displayPrice"] !== undefined ? _data["displayPrice"] : <any>null;
            this.displaySpecialPrice = _data["displaySpecialPrice"] !== undefined ? _data["displaySpecialPrice"] : <any>null;
            this.sellFrom = _data["sellFrom"] ? new Date(_data["sellFrom"].toString()) : <any>null;
            this.sellTo = _data["sellTo"] ? new Date(_data["sellTo"].toString()) : <any>null;
            this.displayFrom = _data["displayFrom"] ? new Date(_data["displayFrom"].toString()) : <any>null;
            this.displayTo = _data["displayTo"] ? new Date(_data["displayTo"].toString()) : <any>null;
            this.shippingChargeFreeFlg = _data["shippingChargeFreeFlg"] !== undefined ? _data["shippingChargeFreeFlg"] : <any>null;
            this.maxSellQuantity = _data["maxSellQuantity"] !== undefined ? _data["maxSellQuantity"] : <any>null;
            this.listImageId = _data["listImageId"] !== undefined ? _data["listImageId"] : <any>null;
            this.priceShipping = _data["priceShipping"] !== undefined ? _data["priceShipping"] : <any>null;
            this.shippingType = _data["shippingType"] !== undefined ? _data["shippingType"] : <any>null;
            this.shippingSizeKbn = _data["shippingSizeKbn"] !== undefined ? _data["shippingSizeKbn"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.shopId = _data["shopId"] !== undefined ? _data["shopId"] : <any>null;
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>null;
            this.lastModifiedBy = _data["lastModifiedBy"] !== undefined ? _data["lastModifiedBy"] : <any>null;
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["displayPrice"] = this.displayPrice !== undefined ? this.displayPrice : <any>null;
        data["displaySpecialPrice"] = this.displaySpecialPrice !== undefined ? this.displaySpecialPrice : <any>null;
        data["sellFrom"] = this.sellFrom ? this.sellFrom.toISOString() : <any>null;
        data["sellTo"] = this.sellTo ? this.sellTo.toISOString() : <any>null;
        data["displayFrom"] = this.displayFrom ? this.displayFrom.toISOString() : <any>null;
        data["displayTo"] = this.displayTo ? this.displayTo.toISOString() : <any>null;
        data["shippingChargeFreeFlg"] = this.shippingChargeFreeFlg !== undefined ? this.shippingChargeFreeFlg : <any>null;
        data["maxSellQuantity"] = this.maxSellQuantity !== undefined ? this.maxSellQuantity : <any>null;
        data["listImageId"] = this.listImageId !== undefined ? this.listImageId : <any>null;
        data["priceShipping"] = this.priceShipping !== undefined ? this.priceShipping : <any>null;
        data["shippingType"] = this.shippingType !== undefined ? this.shippingType : <any>null;
        data["shippingSizeKbn"] = this.shippingSizeKbn !== undefined ? this.shippingSizeKbn : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["shopId"] = this.shopId !== undefined ? this.shopId : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>null;
        data["lastModifiedBy"] = this.lastModifiedBy !== undefined ? this.lastModifiedBy : <any>null;
        return data;
    }
}

export class ProductDtoPaginatedList {
    items?: ProductDto[] | null;
    pageNumber?: number;
    readonly totalPages?: number;
    readonly totalCount?: number;
    readonly hasMoreData?: boolean;
    readonly hasPreviousPage?: boolean;
    readonly hasNextPage?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProductDto.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
            this.pageNumber = _data["pageNumber"] !== undefined ? _data["pageNumber"] : <any>null;
            (<any>this).totalPages = _data["totalPages"] !== undefined ? _data["totalPages"] : <any>null;
            (<any>this).totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            (<any>this).hasMoreData = _data["hasMoreData"] !== undefined ? _data["hasMoreData"] : <any>null;
            (<any>this).hasPreviousPage = _data["hasPreviousPage"] !== undefined ? _data["hasPreviousPage"] : <any>null;
            (<any>this).hasNextPage = _data["hasNextPage"] !== undefined ? _data["hasNextPage"] : <any>null;
        }
    }

    static fromJS(data: any): ProductDtoPaginatedList {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDtoPaginatedList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["totalPages"] = this.totalPages !== undefined ? this.totalPages : <any>null;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["hasMoreData"] = this.hasMoreData !== undefined ? this.hasMoreData : <any>null;
        data["hasPreviousPage"] = this.hasPreviousPage !== undefined ? this.hasPreviousPage : <any>null;
        data["hasNextPage"] = this.hasNextPage !== undefined ? this.hasNextPage : <any>null;
        return data;
    }
}

export class ProductDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: ProductDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? ProductDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProductDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class ProductStockAddDto {

    init(_data?: any) {
    }

    static fromJS(data: any): ProductStockAddDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductStockAddDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class ProductStockDto {

    init(_data?: any) {
    }

    static fromJS(data: any): ProductStockDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductStockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class ProductStockDtoPaginatedList {
    items?: ProductStockDto[] | null;
    pageNumber?: number;
    readonly totalPages?: number;
    readonly totalCount?: number;
    readonly hasMoreData?: boolean;
    readonly hasPreviousPage?: boolean;
    readonly hasNextPage?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProductStockDto.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
            this.pageNumber = _data["pageNumber"] !== undefined ? _data["pageNumber"] : <any>null;
            (<any>this).totalPages = _data["totalPages"] !== undefined ? _data["totalPages"] : <any>null;
            (<any>this).totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            (<any>this).hasMoreData = _data["hasMoreData"] !== undefined ? _data["hasMoreData"] : <any>null;
            (<any>this).hasPreviousPage = _data["hasPreviousPage"] !== undefined ? _data["hasPreviousPage"] : <any>null;
            (<any>this).hasNextPage = _data["hasNextPage"] !== undefined ? _data["hasNextPage"] : <any>null;
        }
    }

    static fromJS(data: any): ProductStockDtoPaginatedList {
        data = typeof data === 'object' ? data : {};
        let result = new ProductStockDtoPaginatedList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["totalPages"] = this.totalPages !== undefined ? this.totalPages : <any>null;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["hasMoreData"] = this.hasMoreData !== undefined ? this.hasMoreData : <any>null;
        data["hasPreviousPage"] = this.hasPreviousPage !== undefined ? this.hasPreviousPage : <any>null;
        data["hasNextPage"] = this.hasNextPage !== undefined ? this.hasNextPage : <any>null;
        return data;
    }
}

export class ProductStockDtoResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: ProductStockDto;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? ProductStockDto.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProductStockDtoResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductStockDtoResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class ProductStockUpdateDto {

    init(_data?: any) {
    }

    static fromJS(data: any): ProductStockUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductStockUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class ProductUpdateDto {
    productId?: string;
    productName?: string | null;
    displayPrice?: number;
    displaySpecialPrice?: number;
    sellFrom?: Date;
    sellTo?: Date;
    displayFrom?: Date;
    displayTo?: Date;
    shippingChargeFreeFlg?: boolean;
    maxSellQuantity?: number;
    listImageId?: string | null;
    priceShipping?: string | null;
    shippingType?: string | null;
    shippingSizeKbn?: string | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.displayPrice = _data["displayPrice"] !== undefined ? _data["displayPrice"] : <any>null;
            this.displaySpecialPrice = _data["displaySpecialPrice"] !== undefined ? _data["displaySpecialPrice"] : <any>null;
            this.sellFrom = _data["sellFrom"] ? new Date(_data["sellFrom"].toString()) : <any>null;
            this.sellTo = _data["sellTo"] ? new Date(_data["sellTo"].toString()) : <any>null;
            this.displayFrom = _data["displayFrom"] ? new Date(_data["displayFrom"].toString()) : <any>null;
            this.displayTo = _data["displayTo"] ? new Date(_data["displayTo"].toString()) : <any>null;
            this.shippingChargeFreeFlg = _data["shippingChargeFreeFlg"] !== undefined ? _data["shippingChargeFreeFlg"] : <any>null;
            this.maxSellQuantity = _data["maxSellQuantity"] !== undefined ? _data["maxSellQuantity"] : <any>null;
            this.listImageId = _data["listImageId"] !== undefined ? _data["listImageId"] : <any>null;
            this.priceShipping = _data["priceShipping"] !== undefined ? _data["priceShipping"] : <any>null;
            this.shippingType = _data["shippingType"] !== undefined ? _data["shippingType"] : <any>null;
            this.shippingSizeKbn = _data["shippingSizeKbn"] !== undefined ? _data["shippingSizeKbn"] : <any>null;
        }
    }

    static fromJS(data: any): ProductUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["displayPrice"] = this.displayPrice !== undefined ? this.displayPrice : <any>null;
        data["displaySpecialPrice"] = this.displaySpecialPrice !== undefined ? this.displaySpecialPrice : <any>null;
        data["sellFrom"] = this.sellFrom ? this.sellFrom.toISOString() : <any>null;
        data["sellTo"] = this.sellTo ? this.sellTo.toISOString() : <any>null;
        data["displayFrom"] = this.displayFrom ? this.displayFrom.toISOString() : <any>null;
        data["displayTo"] = this.displayTo ? this.displayTo.toISOString() : <any>null;
        data["shippingChargeFreeFlg"] = this.shippingChargeFreeFlg !== undefined ? this.shippingChargeFreeFlg : <any>null;
        data["maxSellQuantity"] = this.maxSellQuantity !== undefined ? this.maxSellQuantity : <any>null;
        data["listImageId"] = this.listImageId !== undefined ? this.listImageId : <any>null;
        data["priceShipping"] = this.priceShipping !== undefined ? this.priceShipping : <any>null;
        data["shippingType"] = this.shippingType !== undefined ? this.shippingType : <any>null;
        data["shippingSizeKbn"] = this.shippingSizeKbn !== undefined ? this.shippingSizeKbn : <any>null;
        return data;
    }
}

export class SendMailDto {
    emailSend?: string | null;

    init(_data?: any) {
        if (_data) {
            this.emailSend = _data["emailSend"] !== undefined ? _data["emailSend"] : <any>null;
        }
    }

    static fromJS(data: any): SendMailDto {
        data = typeof data === 'object' ? data : {};
        let result = new SendMailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailSend"] = this.emailSend !== undefined ? this.emailSend : <any>null;
        return data;
    }
}

export class UserCreateDto {
    name?: string | null;
    userName?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    referredUserId?: string | null;
    password?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.referredUserId = _data["referredUserId"] !== undefined ? _data["referredUserId"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): UserCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["referredUserId"] = this.referredUserId !== undefined ? this.referredUserId : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export class UserLoginResponse {
    userName?: string | null;
    token?: string | null;

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
        }
    }

    static fromJS(data: any): UserLoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data;
    }
}

export class UserLoginResponseResponseModel {
    isSuccess?: boolean;
    message?: string | null;
    data?: UserLoginResponse;

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.data = _data["data"] ? UserLoginResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): UserLoginResponseResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginResponseResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data;
    }
}

export class UserUpdateDto {
    name?: string | null;
    userName?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    referredUserId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.referredUserId = _data["referredUserId"] !== undefined ? _data["referredUserId"] : <any>null;
        }
    }

    static fromJS(data: any): UserUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["referredUserId"] = this.referredUserId !== undefined ? this.referredUserId : <any>null;
        return data;
    }
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}